{"version":3,"sources":["components/home/Home.js","components/utils/API.js","components/card/Card.js","components/all/All.js","components/footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Home","axios","get","Card","props","className","uk-grid","width","height","src","emp","image","alt","id","last","first","city","state","uk-icon","cell","email","All","onClick","handleSortChange","uk-form-custom","onChange","handleSelect","value","type","tabIndex","window","location","reload","employees","map","Footer","App","API","then","response","data","results","name","age","dob","picture","large","setState","sort","a","b","console","log","catch","err","componentDidMount","filter","e","document","getElementById","options","selectedIndex","text","this","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c679a600.chunk.js","sourcesContent":["import React from 'react';\nimport './home.css';\n\nfunction Home() {\n    return (\n        <section className=\"uk-container\">\n            <img className=\"img-fluid\"src=\"http://clipart-library.com/images/8cGbXEaxi.png\" alt=\"logo\"/>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n            <h1>Welcome!</h1>\n            <a id=\"viewAll\" href=\"/all\"type=\"button\" class=\"uk-button uk-button-secondary\">View All!</a>\n            <hr/>\n            </div>\n            </div>\n            <p id=\"bio\">\n                With this application, any employer will be able to view all of their employees in one place.\n                Managers are able to search for employees by their location, or sort by the employees' last names.\n                Select the button below to get started. Please enjoy!\n            </p>\n            \n        </section>\n    )\n};\n\nexport default Home;","import axios from \"axios\";\n\nconst URL = 'https://randomuser.me/api/?results=100&nat=us';\n\nexport default {\n    searchEmployee: function() {\n        return axios.get(URL);\n    }\n};","import React from 'react';\nimport './card.css'\nfunction Card(props) {\n    \n    return (\n\n        <div className=\"employeeCards uk-card uk-card-small uk-card-secondary uk-width-1-1@l\">\n\n            <div className=\"uk-card-header\">\n                <div className=\"uk-grid-small\" uk-grid>\n                    <div className=\"uk-width-auto\">\n                        <img className=\"uk-border-circle\" width=\"40\" height=\"40\" src={props.emp.image} alt=\"Profile\"/>\n                    </div>\n                    <div className=\"uk-width-expand\">\n                        <h3 id=\"name\"className=\"uk-card-title uk-margin-remove-bottom\">{props.emp.last}, {props.emp.first}</h3>\n                        <p className=\"uk-text-meta uk-margin-remove-top\">{props.emp.city}, {props.emp.state}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"uk-card-body\">\n                <p><span className=\"uk-margin-small-right\" uk-icon=\"phone\"></span>{props.emp.cell}</p>\n                <p><span className=\"uk-margin-small-right\" uk-icon=\"mail\"></span>{props.emp.email}</p>\n            </div>\n        </div>\n\n            )\n        };\n        \nexport default Card;","import React from 'react';\nimport Card from '../card/Card';\nimport '../card/card.css';\n\nfunction All(props) {\n\n    function refreshPage() {\n        window.location.reload(false);\n      }\n\n    return (\n        \n        <section className=\"uk-container\">\n            <h1 id=\"allHeader\">All Employees</h1>\n            <button onClick={props.handleSortChange} id=\"sortButton\" className=\"uk-button uk-button-secondary uk-width-1-1\">\n                <span uk-icon=\"chevron-down\"></span> Sort By Last Name</button>\n                <div className=\"uk-margin\">\n        <div uk-form-custom=\"target: > * > span:first-child\">\n            <select onChange={props.handleSelect} id=\"scripts\">\n                <option value=\"\">Filter By State ...</option>\n                <option value=\"Alabama\">Alabama</option>\n                <option value=\"Alaska\">Alaska</option>\n                <option value=\"Arizona\">Arizona</option>\n                <option value=\"Arkansas\">Arkansas</option>\n                <option value=\"California\">California</option>\n                <option value=\"Colorado\">Colorado</option>\n                <option value=\"Arizona\">Arizona</option>\n                <option value=\"Connecticut\">Connecticut</option>\n                <option value=\"Delaware\">Delaware</option>\n                <option value=\"Florida\">Florida</option>\n                <option value=\"Georgia\">Georgia</option>\n                <option value=\"Hawaii\">Hawaii</option>\n                <option value=\"Idaho\">Idaho</option>\n                <option value=\"Illinois\">Illnois</option>\n                <option value=\"Indiana\">Indiana</option>\n                <option value=\"Iowa\">Iowa</option>\n                <option value=\"Kansas\">Kansas</option>\n                <option value=\"Kentucky\">Kentucky</option>\n                <option value=\"Louisiana\">Louisiana</option>\n                <option value=\"Maine\">Maine</option>\n                <option value=\"Massachusetts\">Massachusetts</option>\n                <option value=\"Michigan\">Michigan</option>\n                <option value=\"Minnesota\">Minnesota</option>\n                <option value=\"Mississippi\">Mississippi</option>\n                <option value=\"Missouri\">Missouri</option>\n                <option value=\"Montana\">Montana</option>\n                <option value=\"Nebraska\">Nebraska</option>\n                <option value=\"Nevada\">Nevada</option>\n                <option value=\"New Hampshire\">New Hampshire</option>\n                <option value=\"New Jersey\">New Jersey</option>\n                <option value=\"New Mexico\">New Mexico</option>\n                <option value=\"New York\">New York</option>\n                <option value=\"North Carolina\">North Carolina</option>\n                <option value=\"North Dakota\">North Dakota</option>\n                <option value=\"Ohio\">Ohio</option>\n                <option value=\"Oklahoma\">Oklahoma</option>\n                <option value=\"Oregon\">Oregon</option>\n                <option value=\"Pennsylvania\">Pennsylvania</option>\n                <option value=\"Rhode Island\">Rhode Island</option>\n                <option value=\"South Carolina\">South Carolina</option>\n                <option value=\"South Dakota\">South Dakota</option>\n                <option value=\"Tennessee\">Tennessee</option>\n                <option value=\"Texas\">Texas</option>\n                <option value=\"Utah\">Utah</option>\n                <option value=\"Vermont\">Vermont</option>\n                <option value=\"Virginia\">Virginia</option>\n                <option value=\"Washington\">Washington</option>\n                <option value=\"West Virginia\">West Virginia</option>\n                <option value=\"Wisconson\">Wisconson</option>\n                <option value=\"Wyoming\">Wyoming</option>\n            </select>\n            <button className=\"uk-button uk-button-secondary\" type=\"button\" tabIndex=\"-1\">\n                <span></span>\n                <span uk-icon=\"icon: chevron-down\"></span>\n            </button>\n        </div>\n        <button id=\"refreshButton\" onClick={refreshPage} className=\"uk-button uk-button-secondary\">Refresh List</button>\n    </div>\n            <div className=\"card-group\">\n            {props.employees.map(emp => (\n                <Card emp={emp}/>\n            ))}\n            </div>\n        </section>\n\n    )\n};\n\nexport default All;","import React from 'react';\nimport './footer.css';\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <p>Thank you for visiting my Employee Directory! Please visit github.com/jcbpetersen1995\n                for more great projects!\n            </p>\n        </footer>\n\n    )\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navbar from './components/navbar/Navbar';\nimport Home from './components/home/Home';\nimport API from './components/utils/API';\nimport All from './components/all/All';\nimport Footer from './components/footer/Footer';\n\n\n\nclass App extends Component {\n\n    state = {\n        employees: [],\n    };\n\n    handleSortChange = () => {\n        API.searchEmployee()\n            .then(response => {\n                \n                const employees = response.data.results.map(emp => {\n                    const data = {\n                        first: emp.name.first,\n                        last: emp.name.last,\n                        email: emp.email,\n                        age: emp.dob.age,\n                        image: emp.picture.large,\n                        cell: emp.cell,\n                        id: emp.id.value,\n                        city: emp.location.city,\n                        state: emp.location.state\n                    }\n                    return data\n                })\n                this.setState({ employees: employees.sort(function(a,b) {\n                    if(a.last < b.last) {return -1}\n                    if(a.last > b.last) {return 1}\n                    return 0;\n                }) \n            })\n                console.log(employees)\n            })\n            .catch(err => console.log(err));\n    }\n\n    componentDidMount = () => {\n        API.searchEmployee()\n            .then(response => {\n                \n                const employees = response.data.results.map(emp => {\n                    const data = {\n                        first: emp.name.first,\n                        last: emp.name.last,\n                        email: emp.email,\n                        age: emp.dob.age,\n                        image: emp.picture.large,\n                        cell: emp.cell,\n                        id: emp.id.value,\n                        city: emp.location.city,\n                        state: emp.location.state\n                    }\n                    return data\n                })\n                this.setState({ employees: employees})\n                console.log(employees)\n            })\n            .catch(err => console.log(err));\n    }\n\n    handleSelect = (value) => {\n        API.searchEmployee()\n            .then(response => {\n                \n                const employees = response.data.results.map(emp => {\n                    const data = {\n                        first: emp.name.first,\n                        last: emp.name.last,\n                        email: emp.email,\n                        age: emp.dob.age,\n                        image: emp.picture.large,\n                        cell: emp.cell,\n                        id: emp.id.value,\n                        city: emp.location.city,\n                        state: emp.location.state\n                    }\n                    return data\n                })\n                this.setState({ employees: employees.filter(employees => {\n                    var e = document.getElementById(\"scripts\");\n                    var location = e.options[e.selectedIndex].text;\n                    if(employees.state === location) {\n                        return employees.state\n                    }\n            })\n        })\n    })\n    .catch(err => {\n        console.log(err)\n    })}\n\n\n\n\n    render() {\n        return (\n            <div>\n              \n                \n                 \n                <All employees={this.state.employees} handleSortChange={this.handleSortChange}\n                 handleSelect={this.handleSelect} />} />\n                 <Footer />      \n            </div>\n        )\n    }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}